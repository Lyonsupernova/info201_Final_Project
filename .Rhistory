# It should use an `input` with features: `x_var`, `y_var`, `color`, and `size`
# Save the result of `renderPlot` to output$scatter
server <- function(input, output) {
output$scatter <- renderPlot({
# Store the title of the graph in a variable indicating the x/y variables
title <- paste0("MPG Dataset: ", input$x_var, " v.s.", input$y_var)
# Create ggplot scatter
p <- ggplot(mpg) +
geom_point(mapping = aes_string(x = input$x_var, y = input$y_var),
size = input$size,
color = input$color) +
labs(x = input$x_var, y = input$y_var, title = title)
p
})
}
library(shiny)
library(ggplot2)
# It should use an `input` with features: `x_var`, `y_var`, `color`, and `size`
# Save the result of `renderPlot` to output$scatter
server <- function(input, output) {
output$scatter <- renderPlot({
# Store the title of the graph in a variable indicating the x/y variables
title <- paste0("MPG Dataset: ", input$x_var, " v.s.", input$y_var)
# Create ggplot scatter
p <- ggplot(mpg) +
geom_point(mapping = aes_string(x = input$x_var, y = input$y_var),
size = input$size,
color = input$color) +
labs(x = input$x_var, y = input$y_var, title = title)
p
})
}
# UI for scatterplot
library(shiny)
library(ggplot2)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Create a variable `x_input` that stores a `selectInput()` for your
# variable to appear on the x axis of your chart.
# Use the vector of column names as possible values, and make sure
# to assign an inputId, label, and selected value
x_input <- selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "displ"
)
# Using a similar approach, create a variable `y_input` that stores a
# `selectInput()` for your variable to appear on the y axis of your chart.
# Add a `selectInput` for the `y` variable
y_input <- selectInput(
"y_var",
label = "Y Variable",
choices = select_values,
selected = "cyl"
)
# Create a variable `color_input` as a `selectInput()` that allows users to
# select a color from a list of choices
color_input <- selectInput(
"color",
label = "Color",
choices = list("Red" = "red", "Blue" = "blue", "Green" = "green")
)
# Create a variable `size_input` as a `sliderInput()` that allows users to
# select a point size to use in your `geom_point()`
size_input <- sliderInput(
"size",
label = "Size of point", min = 1, max = 10, value = 5
)
# Create a variable `ui` that is a `fluidPage()` ui element.
# It should contain:
ui <- fluidPage(
# A page header with a descriptive title
h1("MPG Dataset Exploration"),
# Your x input
x_input,
# Your y input
y_input,
# Your color input
color_input,
# Your size input
size_input,
# Plot the output with the name "scatter" (defined in `app_server.R`)
plotOutput("scatter")
)
# Load libraries so they are available
library("shiny")
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
source("app_ui.R")
source("app_server.R")
setwd("~/Documents/info201/exercises-Lyonsupernova/chapter-19-exercises/exercise-5")
# Load libraries so they are available
library("shiny")
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
source("app_ui.R")
source("app_server.R")
# Create a new `shinyApp()` using the loaded `ui` and `server` variables
shinyApp(ui = ui, server = server)
# Create a variable `x_input` that stores a `selectInput()` for your
# variable to appear on the x axis of your chart.
# Use the vector of column names as possible values, and make sure
# to assign an inputId, label, and selected value
x_input <- selectInput(
"x_var",
label = "X Variable",
choices = select_values,
selected = "displ"
)
runApp()
setwd("~/Documents/info201/exercises-Lyonsupernova/chapter-19-exercises/exercise-7")
# Load libraries so they are available
library("shiny")
# Use source() to execute the `app_ui.R` and `app_server.R` files. These will
# define the UI value and server function respectively.
source("app_ui.R")
source("app_server.R")
# Create a new `shinyApp()` using the loaded `ui` and `server` variables
shinyApp(ui = ui, server = server)
setwd("~/Documents/info201/info201_Final_Project")
read.csv("data/house_sales.csv", stringsAsFactors = FALSE)
house_sales <- read.csv("data/house_sales.csv", stringsAsFactors = FALSE)
View(house_sales)
library(dplyr)
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price, nr.rm = TRUE))
}
twob_twob <- house_sales %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price, nr.rm = TRUE))
View(twob_twob)
library(ggplot2)
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price, nr.rm = TRUE))
return(ggplot(twob_twob) + barplot(mapping = aes(x = floors, y = price)))
}
get_plot_info(house_sales)
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price, nr.rm = TRUE))
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price)))
}
get_plot_info(house_sales)
house_sales <- read.csv("data/house_sales.csv", stringsAsFactors = FALSE)
View(house_sales)
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price, nr.rm = TRUE))
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price)))
}
get_plot_info(house_sales)
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price))
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price)))
}
get_plot_info(house_sales)
twob_twob <- house_sales %>%
filter(bedrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price))
View(twob_twob)
twob_twob <- house_sales %>%
filter(bedrooms == 2)
View(twob_twob)
twob_twob <- house_sales %>%
filter(bedrooms == 2) %>%
group_by(floors)
twob_twob <- house_sales %>%
filter(bedrooms == 2) %>%
group_by(floors) %>%
summarise(avg_price = mean(price))
View(twob_twob)
twob_twob <- house_sales %>%
filter(bedrooms == 2) %>%
group_by(floors) %>%
summarise(avg_price = mean(price))
house_sales <- read.csv("data/house_sales.csv", stringsAsFactors = FALSE)
twob_twob <- house_sales %>%
filter(bedrooms == 2) %>%
group_by(floors) %>%
summarise(avg_price = mean(price))
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price))
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price)))
}
twob_twob <- house_sales %>%
filter(bedrooms == 2) %>%
group_by(floors)
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price))
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price)))
}
get_plot_info(house_sales)
house_sales <- read.csv("data/house_sales.csv", stringsAsFactors = FALSE)
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price))
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price)))
}
get_plot_info(house_sales)
twob_twob <- house_sales %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price))
View(twob_twob)
house_sales <- read.csv("data/house_sales.csv", stringsAsFactors = FALSE)
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price))
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price))) +
labs(
title = "Sales of 2B2B house from different floors",
x = "Floors",
y = "Price"
) + coord_flip()
}
get_plot_info(house_sales)
get_plot_info(house_sales)
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price))
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price))) +
labs(
title = "Sales of 2B2B house from different floors",
x = "Floors",
y = "Price"
) + coord_flip())
}
get_plot_info(house_sales)
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price)) +
labs(
title = "Sales of 2B2B house from different floors",
x = "Floors",
y = "Price"
))
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price))
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price)) +
labs(
title = "Sales of 2B2B house from different floors",
x = "Floors",
y = "Price"
))
}
get_plot_info(house_sales)
?scale_y_discrete
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price))
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price)) +
labs(
title = "Sales of 2B2B house from different floors",
x = "Floors",
y = "Price"
)) +
ylim(0, 50000)
}
get_plot_info(house_sales)
house_sales <- read.csv("data/house_sales.csv", stringsAsFactors = FALSE)
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price))
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price)) +
labs(
title = "Sales of 2B2B house from different floors",
x = "Floors",
y = "Price"
) +
ylim(0, 50000))
}
get_plot_info(house_sales)
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price))
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price)) +
labs(
title = "Sales of 2B2B house from different floors",
x = "Floors",
y = "Price"
) +
ylim(0, 60000))
}
get_plot_info(house_sales)
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price))
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price)) +
labs(
title = "Sales of 2B2B house from different floors",
x = "Floors",
y = "Price"
))
}
get_plot_info(house_sales)
house_sales <- read.csv("data/house_sales.csv", stringsAsFactors = FALSE)
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price))
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price)) +
labs(
title = "Sales of 2B2B house from different floors",
x = "Floors",
y = "Price"
) +
ylim(0.0, 50000.0))
}
get_plot_info(house_sales)
house_sales <- read.csv("data/house_sales.csv", stringsAsFactors = FALSE)
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price))
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price)) +
labs(
title = "Sales of 2B2B house from different floors",
x = "Floors",
y = "Price"
))
}
get_plot_info(house_sales)
house_sales <- read.csv("data/house_sales.csv", stringsAsFactors = FALSE)
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price))
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price)) +
labs(
title = "Sales of 2B2B house from different floors",
x = "Floors",
y = "Price"
) +
scale_y_continuous(limits = c(0, 60000)))
}
get_plot_info(house_sales)
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price))
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price)) +
labs(
title = "Sales of 2B2B house from different floors",
x = "Floors",
y = "Price"
))
}
get_plot_info(house_sales)
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price))
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price)) +
labs(
title = "Sales of 2B2B house from different floors",
x = "Floors",
y = "Price"
)) +
scale_y_continuous(labels = comma)
}
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price))
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price)) +
labs(
title = "Sales of 2B2B house from different floors",
x = "Floors",
y = "Price"
) +
scale_y_continuous(labels = comma))
}
get_plot_info(house_sales)
get_plot_info <- function(dataset) {
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price))
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price)) +
labs(
title = "Sales of 2B2B house from different floors",
x = "Floors",
y = "Price"
) +
scale_y_continuous(labels = scales::comma))
}
get_plot_info(house_sales)
get_plot_info(house_sales)
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price))
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price)) +
labs(
title = "Sales of 2B2B house from different floors",
x = "Floors",
y = "Price"
) +
scale_y_continuous(labels = scales::comma))
}
get_plot_info(house_sales)
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price))
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price)) +
labs(
title = "Sales of 2B2B house from different floors",
x = "Floors",
y = "Price"
) +
scale_y_continuous(labels = comma))
}
get_plot_info(house_sales)
get_plot_info <- function(dataset) {
get_plot_info <- function(dataset) {
twob_twob <- dataset %>%
filter(bedrooms == 2, bathrooms == 2) %>%
group_by(floors) %>%
summarise(price = mean(price))
return(ggplot(twob_twob) + geom_col(mapping = aes(x = floors, y = price)) +
labs(
title = "Sales of 2B2B house from different floors",
x = "Floors",
y = "Price"
))
}
get_plot_info(house_sales)
